<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WF.Utility.UDA</name>
    </assembly>
    <members>
        <member name="E:WF.Utility.UDA.IRowsProcessedEventSource.OnRowsProcessedNotification">
            <summary>
            Rows processed event.  Must be wired up before opening the processor.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.IRowsProcessedEventSource.NotifyAfter">
            <summary>
            OnRowsProcessedNotification rowcount.
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.BaseRowsProcessedEventImplementation.Abort">
            <summary>
            The abort flag for all derived classes.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.BaseRowsProcessedEventImplementation.NotifyAfter">
            <summary>
            Gets or sets the Notify interval expressed in rows processed.  0 disables the event notification.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IUDADataWriter">
            <summary>
            Many of the classes implement this method, but the class at the end of the chain should be called to move the chain forward.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.IUDADataWriter.WriteRow">
            <summary>
            Similar to the Read() on datareader.  This method will return true as long as there are rows to read and then write.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.IUDADataWriter.WriteToEnd">
            <summary>
            Will iteratively call WriteRow() until it returns false.  Returns the number of rows written.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.IUDADataWriter.SourceReader">
            <summary>
            The source from which the writer draws.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.Evaluator.InputArgCount">
            <summary>
            Returns the number of arguments to the transform
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.Evaluator.InputArgs">
            <summary>
            Returns the number of arguments to the transform
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.SimpleReader">
            <summary>
            This is an IUDADataReader implementation that can wrap any IDataReader source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.IUDADataReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.IUDADataReader.ColumnNames">
            <summary>
            Returns the column Names for the reader
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.IUDADataReader.TableSchema">
            <summary>
            Returns the Table schema as a DataTable (without data).
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.IUDADataReader.ReadCounter">
            <summary>
            Returns the current read counter.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.SimpleReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.SimpleReader.ColumnNames">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.SimpleReader.TableSchema">
            <summary>
            Returns a DataTable object that represents the schema of this reader.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.Discovery.GetBinaryFileRowSetInfo(WF.Utility.UDA.ConnInfoBase,System.String)">
            <summary>
            Returns a BinaryFileRowsetInfo object based on the desired table name.  If it cannot be found,
            the first "table" is selected and returned.  If the ConnInfoBase is not the correct kind, a null is returned.
            Only affects XLS, XLSX, and ACCESS files.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.Discovery.GetHints(System.String)">
            <summary>
            Try to figure out a hint using the Bytes.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.Discovery.ReadString(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Open and read a string from a text file in the given encoding.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.Discovery.ReadRows(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Open and read lines from a text file in the given encoding.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.Discovery.ReadBytes(System.String,System.Int32)">
            <summary>
            Open and read length bytes from the file.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.Discovery.GetTextFileEncoding(System.String)">
            <summary>
            Tries to determine the text file encoding.  Returns null if this is thought to be a binary file.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.XmlDataReader">
            <summary>
            This is an IUDADataReader implementation that can wrap any IDataReader source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.XmlDataReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.XmlDataReader.ColumnNames">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.XmlDataReader.TableSchema">
            <summary>
            Returns a DataTable object that represents the schema of this reader.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.DataSourceType">
            <summary>
            The list of data sources supported by the library
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.Unknown">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.DelimitedText">
            <summary>
            CSV, Tab Delimited, Pipe Delimited, etc.
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.FixedWidthText">
            <summary>
            Fixed width text files
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.Xls">
            <summary>
            Microsoft Excel 97/2000
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.Xlsx">
            <summary>
            Microsoft Excel 2007 +
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.Dbase">
            <summary>
            DBase 4 and 5 (dbf)
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.Access">
            <summary>
            Mdb files
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.MSSQLTable">
            <summary>
            MSSQL data sources
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.MSSQLQuery">
            <summary>
            MSSQL data sources
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.MySqlTable">
            <summary>
            MySql data sources
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.XmlData">
            <summary>
            DataSet or DataTable saved as XML
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.DataSourceType.XmlGeneric">
            <summary>
            Generic XML
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.ValueTrimmingOptions">
            <summary>
            Determines which values should be trimmed.
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.ValueTrimmingOptions.None">
            <summary>
            Don't do any trimming
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.ValueTrimmingOptions.UnquotedOnly">
            <summary>
            Only trim unquoted values
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.ValueTrimmingOptions.QuotedOnly">
            <summary>
            Only trim quoted values
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.ValueTrimmingOptions.All">
            <summary>
            trim all values
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.#ctor(WF.Utility.UDA.DataETLInfo,System.Boolean)">
            <summary>
            Constructor - Setting the open flag will open the ETL process to the Writer. 
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.Open">
            <summary>
            Opens the entire process, and returns the writer interface for stepping through.  This will never open a bulk operation.
            Use ProcessAllRows to open in bulk mode if available for the writer type.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.Open(System.Boolean)">
            <summary>
            Opens the entire process, and returns the writer interface for stepping through.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.OpenPartial(WF.Utility.UDA.TransformInfoBase)">
            <summary>
            Shortcuts the entire process and opens a reader up to the item given. If no item is given, then only the source reader is opened. 
            This allows for a partial process for testing in the gui.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.OpenReader">
            <summary>
            Opens the last possible reader within the given ETLInfo. 
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.ProcessAllRows">
            <summary>
            Opens the process, and processes all rows til done.  Returns the count of rows written.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.OpenSingleWriter(WF.Utility.UDA.IUDADataReader,WF.Utility.UDA.RowsetInfoBase,System.Boolean)">
            <summary>
            Allows for alternative bulk option.  Not all writers support this.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataETLProcessor.lastProcessor_OnRowsProcessedNotification(System.Object,WF.Utility.UDA.RowsProcessedEventArgs)">
            <summary>
            Catches the incoming event from the last reader/writer, and forwards.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.DataETLProcessor.IsOpen">
            <summary>
            Returns whether the Processor is open.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IConnInfo">
            <summary>
            Implements the basic ConnInfo Interface - basic for all connection types
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.ITextFileConnInfo">
            <summary>
            Is one of the text file types (delimited, XML, or Fixed Width) - not binary driver.  usually a text parser type of "driver"
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IHasFileName">
            <summary>
            Implements FileName get/set used for those types that connect to a file.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IBinaryFileConnInfo">
            <summary>
            Is one of the binary file types (Access, Excel, DBase) that still use a binary driver.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IHasConnString">
            <summary>
            Implements a Connection String whether it has a connection string (usually a dbms or something.)
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.BinaryFileReader">
            <summary>
            This is an IUDADataReader implementation that wraps 
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.BinaryFileReader.#ctor(WF.Utility.UDA.RowsetInfoBase,System.Boolean)">
            <summary>
            Does not open the reader.  This method is needed so that we can read the Table list from the data source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.BinaryFileReader.GetTableNames">
            <summary>
            Used to retrieve the View/Table/Sheet Names contained in the DB.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.BinaryFileReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.BinaryFileReader.ColumnNames">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.BinaryFileReader.TableSchema">
            <summary>
            Returns a DataTable object that represents the schema of this reader.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.ExpressionBase.InputArgCount">
            <summary>
            Returns the number of arguments to the transform
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.ExpressionBase.InputArgs">
            <summary>
            Returns the number of arguments to the transform
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.DelimitedTextRowsetInfo.DelimitedTextConnInfo">
            <summary>
            Strongly typed accessor
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.SqlTableRowsetInfo.SqlTableConnInfo">
            <summary>
            Strongly typed accessor
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IHasDelimiter">
            <summary>
            Implements FileName get/set whether the connected data uses a delimiter (text files)
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DelimitedTextWriter.WriteRow(System.Collections.Generic.IList{System.String})">
            <summary>
            Outputs a row to the stream
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:WF.Utility.UDA.DelimitedTextWriter.WriteRow(System.Collections.Generic.IList{System.Object})">
            <summary>
            Outputs a row to the stream
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:WF.Utility.UDA.DelimitedTextReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.DelimitedTextReader.ColumnNames">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.DelimitedTextReader.TableSchema">
            <summary>
            Returns a DataTable object that represents the schema of this reader.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IHasHeader">
            <summary>
            Implements HasHeader get/set when the connected table has option to have a header or not.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.SimpleDelimitedTextWriter">
            <summary>
            Simple Text writer that uses the Connection Info for the file destination.
            This does not Implement the IUDADataWriter interface and thus can't be used by any 
            file processing chain.  It is for writing Delimited files easily from code.  This is used in
            Test and Test support, but can be used if you need to write a file.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.SimpleDelimitedTextWriter.WriteRow(System.Collections.Generic.IList{System.Object})">
            <summary>
            Outputs a row to the stream
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:WF.Utility.UDA.SimpleDelimitedTextWriter.WriteRow(System.Collections.Generic.IList{System.String})">
            <summary>
            Outputs a row to the stream
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:WF.Utility.UDA.SimpleDelimitedTextWriter.WriteHeader(System.Collections.Generic.IList{System.String})">
            <summary>
            Writes the header a row to the stream
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:WF.Utility.UDA.UDAHelper">
            <summary>
            Static class to help automate some tasks with the UDA framework
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.UDAHelper.FillDataSet(System.Int32,WF.Utility.UDA.RowsetInfoBase)">
            <summary>
            Fills a DataSet with the requested number of rows from the RowsetInbfo given.  A value of 0 for 
            rowCount will read all the rows from the source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.UDAHelper.FillDataSet(WF.Utility.UDA.RowsetInfoBase)">
            <summary>
            Fills a DataSet with the requested number of rows from the RowsetInbfo given.  A value of 0 for 
            rowCount will read all the rows from the source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.UDAHelper.FillTable(System.Int32,WF.Utility.UDA.RowsetInfoBase)">
            <summary>
            Fills a DataTable with the requested number of rows from the RowsetInbfo given.  A value of 0 for 
            rowCount will read all the rows from the source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.UDAHelper.FillTable(WF.Utility.UDA.RowsetInfoBase)">
            <summary>
            Fills a DataTable with the requested number of rows from the RowsetInbfo given.  Reads
            all rows from the datasource
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.RowsProcessedEventArgs.RowCount">
            <summary>
            The row count processed.  Will be even multiple of the NotifyAfter property, unless the operation is complete.
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.RowsProcessedEventArgs.Abort">
            <summary>
            Whether to abort the operation.  Read and write.  A consumer of the event can set this value to cancel.
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.RowsProcessedEventArgs.Complete">
            <summary>
            Whether the overall read/write operation is complete.
            </summary>
        </member>
        <member name="F:WF.Utility.UDA.RowsProcessedEventArgs.Status">
            <summary>
            Whether the overall read/write operation is complete.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IUDATransform">
            <summary>
            IUDATransform is an IUDADataReader and consumes an IUDADataReader for its source data.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.IUDATransform.SourceReader">
            <summary>
            The source from which the transform draws.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataTransform.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.IRdbmsConnInfo">
            <summary>
            Is one of the RDBMS types (SQL / MySql)
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.SqlTableReader.#ctor(WF.Utility.UDA.RowsetInfoBase,System.Boolean)">
            <summary>
            Does not open the reader.  This method is needed so that we can read the Table list from the data source.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.SqlTableReader.GetTableNames">
            <summary>
            Used to retrieve the View/Table Names contained in the DB.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.SqlTableReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.SqlTableReader.ColumnNames">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.SqlTableReader.TableSchema">
            <summary>
            Returns a DataTable object that represents the schema of this reader.
            </summary>
        </member>
        <member name="T:WF.Utility.UDA.DataFilter">
            <summary>
            A DataFilter contains one filter expression that is a pass/fail for the row.  A Read() will continue to consume rows from
            its source reader until the row passes the filter.  
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.DataFilter.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.FixedWidthReader.GetRowCount">
            <summary>
            Returns the row count in the datasource.  This can be expensive for Text file types.
            This method exhausts and disposes the current reader requiring that the reader be re-initialized.
            </summary>
        </member>
        <member name="M:WF.Utility.UDA.FixedWidthReader.ParseLine(System.String)">
            <summary>
            Returns true if a valid line is parsed.  Throws exception if ragged = false, and invalid line is found.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthReader.ColumnNames">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthReader.ColumnWidths">
            <summary>
            Returns a list of column names
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthReader.TableSchema">
            <summary>
            Returns a DataTable object that represents the schema of this reader.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthReader.Leftovers">
            <summary>
            If leftovers is configured, this will contain the extra characters at the end of
            the line after the columns have been read.  
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.XmlDataRowsetInfo.XmlDataConnInfo">
            <summary>
            Strongly typed accessor
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.BinaryFileRowsetInfo.BinaryFileConnInfo">
            <summary>
            Strongly typed accessor
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.PaddingChar">
            <summary>
            The padding character to fill the column to it's fixed width.  Defaults to ' '.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.ColumnList">
            <summary>
            List of Column definitions (name and width).
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.Comment">
            <summary>
            The comment character.  A line that starts with this character will be skipped. Default is #.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.ValueTrimmingOptions">
            <summary>
            Whether to trim the strings read from the file (the column values).
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.AllowRagged">
            <summary>
            Allows reading a file that has varying line lenghts.  The Null value will be returned when a full column cannot
            be read from the file.  This also suppresses the parser errors when a ragged file is encountered.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.KeepLeftovers">
            <summary>
            Whether the reader should keep any leftovers of the line in case it is too long.
            Leftovers will be stored in the Leftovers property.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthConnInfo.NullValue">
            <summary>
            The value to return if a null is found in a column.  
            Only applies when a ragged file is parsed and no characters are available to fill a column.
            Allow ragged must be true for this to have any effect.
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.FixedWidthRowsetInfo.FixedWidthConnInfo">
            <summary>
            Strongly typed accessor
            </summary>
        </member>
        <member name="P:WF.Utility.UDA.XmlGenericRowsetInfo.XmlDataConnInfo">
            <summary>
            Strongly typed accessor
            </summary>
        </member>
    </members>
</doc>
